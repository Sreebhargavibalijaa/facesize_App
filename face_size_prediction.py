# -*- coding: utf-8 -*-
"""Untitled87.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cuQpDJACnbrQUnMW0-JyR2HJHiraVv68
"""

#day1

import cv2
import dlib

# Load the image
import cv2
import dlib

# Load the image
image_path = "/content/main.jpg"
image = cv2.imread(image_path)
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Use dlib to detect facial landmarks
detector = dlib.get_frontal_face_detector()
predictor_path = "shape_predictor_68_face_landmarks.dat"  # Update this path
predictor = dlib.shape_predictor(predictor_path)

faces = detector(gray)
for face in faces:
    landmarks = predictor(gray, face)

    # Calculate the size of the face
    width1 = landmarks.part(16).x - landmarks.part(0).x
    height1 = landmarks.part(8).y - landmarks.part(27).y

    # print("Width of face:", width1)
    # print("Height of face:", height)

    # Draw facial landmarks on the image
    for i in range(68):
        x, y = landmarks.part(i).x, landmarks.part(i).y
        cv2.circle(image, (x, y), 1, (0, 0, 255), -1)

# Display the image with facial landmarks
# cv2.cvtColor("Facial Landmarks", image)
cv2.waitKey(0)
cv2.destroyAllWindows()
import cv2
from matplotlib import pyplot as plt

# Assuming you already have the 'image' loaded using OpenCV
# image = cv2.imread("path/to/your/image.jpg")

# Convert BGR to RGB (matplotlib expects images in RGB format)
image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Display the image using matplotlib
plt.imshow(image_rgb)
plt.axis('off')  # Optional: Hide axes
plt.title("Facial Landmarks")

import cv2
import dlib

# Load the image
import cv2
import dlib

# Load the image
image_path = "/content/mian2.jpg"
image = cv2.imread(image_path)
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Use dlib to detect facial landmarks
detector = dlib.get_frontal_face_detector()
predictor_path = "shape_predictor_68_face_landmarks.dat"  # Update this path
predictor = dlib.shape_predictor(predictor_path)

faces = detector(gray)
for face in faces:
    landmarks = predictor(gray, face)

    # Calculate the size of the face
    width = landmarks.part(16).x - landmarks.part(0).x
    height = landmarks.part(8).y - landmarks.part(27).y

    # print("Width of face:", width)
    # print("Height of face:", height)

    # Draw facial landmarks on the image
    for i in range(68):
        x, y = landmarks.part(i).x, landmarks.part(i).y
        cv2.circle(image, (x, y), 1, (0, 0, 255), -1)

# Display the image with facial landmarks
# cv2.cvtColor("Facial Landmarks", image)
cv2.waitKey(0)
cv2.destroyAllWindows()
import cv2
from matplotlib import pyplot as plt

# Assuming you already have the 'image' loaded using OpenCV
# image = cv2.imread("path/to/your/image.jpg")

# Convert BGR to RGB (matplotlib expects images in RGB format)
image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Display the image using matplotlib
plt.imshow(image_rgb)
plt.axis('off')  # Optional: Hide axes
plt.title("Facial Landmarks")


if (width1*height1) > (width*height):
  percentage = ((width1*height1) - (width*height))*100/(width1*height1)
  print("percentage decrement of face: "+ str(percentage))
elif (width1*height1) < (width*height):
  percentage = ((width*height) - (width1*height1))*100/(width*height)
  print("percentage increment of face: "+ str(percentage))
else:
  print("No Increment in face")